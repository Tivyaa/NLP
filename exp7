# Define Transition and Emission Probabilities
transition_prob = {
    'NOUN': {'NOUN': 0.3, 'VERB': 0.4, 'DET': 0.3},
    'VERB': {'NOUN': 0.2, 'VERB': 0.5, 'DET': 0.3},
    'DET': {'NOUN': 0.6, 'VERB': 0.2, 'DET': 0.2}}
emission_prob = {
    'NOUN': {'dog': 0.6, 'cat': 0.4},
    'VERB': {'barks': 0.5, 'meows': 0.5},
    'DET': {'the': 0.7, 'a': 0.3}}

# Define Initial Probabilities
initial_prob = {
    'NOUN': 0.3,
    'VERB': 0.4,
    'DET': 0.3}
# Sample sentence to tag
sentence = ['the', 'dog', 'barks']

# Step 1: Initialization
viterbi = [{}]
path = {}
for tag in initial_prob:
    viterbi[0][tag] = initial_prob[tag] * emission_prob.get(tag, {}).get(sentence[0], 1)  # Handle unseen words
    path[tag] = [tag]

# Step 2: Recursion
for t in range(1, len(sentence)):
    viterbi.append({})
    new_path = {}
    for tag in transition_prob:
        max_prob, prev_tag = max(
            (viterbi[t - 1][prev_tag] * transition_prob[prev_tag].get(tag, 0) * emission_prob.get(tag, {}).get(
                sentence[t], 1), prev_tag)  # Handle unseen words
            for prev_tag in viterbi[t - 1]
        )
        viterbi[t][tag] = max_prob
        new_path[tag] = path[prev_tag] + [tag]
    path = new_path

# Step 3: Termination and Backtracking
max_final_tag = max(viterbi[-1], key=viterbi[-1].get)
best_path = path[max_final_tag]

# Output the POS tags for the sentence
print(f"Sentence: {' '.join(sentence)}")
print(f"POS Tags: {best_path}")
